# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- dev_ops
# pr:
# - main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '6360a5a1-9716-4ca0-ba6a-2d86a012bd94'
  imageRepository: 'user'
  containerRegistry: 'p3fightclub.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'p3fightclub12097246-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Test
  displayName: Test stage
  jobs:
  - job: Test
    displayName: Test
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        feedsToUse: 'select'
        projects: UserService
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: UserService
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: 'test'
        arguments: '--collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
        publishTestResults: true
        projects: UserService/TestingLayer
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

- stage: Build
  displayName: Build stage
  dependsOn: Test
  condition: succeededOrFailed()
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build

#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'NotFightClubnotfightclubusers.default'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes cluster
#             inputs:
#               action: deploy
#               manifests: |
#                 $(Pipeline.Workspace)/manifests/deployment.yml
#                 $(Pipeline.Workspace)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(imageRepository):$(tag)

